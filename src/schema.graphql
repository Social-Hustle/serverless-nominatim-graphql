scalar JSON

type Cursor {
  prevToken: String
  nextToken: String
}

input CursorInput {
  prevToken: String
  nextToken: String
}

type Query {
  item(id: ID!): Item
  getGeoArea(id: ID!): GeoArea
  listGeoAreas(
    filter: GeoAreaFilterInput
    limit: Int
    cursor: CursorInput
  ): GeoAreaConnection
  queryGeoAreasByState(
    state: String!
    filter: GeoAreaFilterInput
    limit: Int
    cursor: CursorInput
  ): GeoAreaConnection
}

type Mutation {
  createItem(input: CreateItemInput!): Item
  updateItem(input: UpdateItemInput!): Item
  deleteItem(input: DeleteItemInput!): Item
  createGeoArea(
    condition: GeoAreaConditionInput
    input: CreateGeoAreaInput!
  ): GeoArea
}

enum AttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum SortDirection {
  ASC
  DESC
}

input BooleanInput {
  attributeExists: Boolean
  attributeType: AttributeTypes
  eq: Boolean
  ne: Boolean
}

input FloatInput {
  attributeExists: Boolean
  attributeType: AttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input IDInput {
  attributeExists: Boolean
  attributeType: AttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: SizeInput
}

input IntInput {
  attributeExists: Boolean
  attributeType: AttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input SizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input StringInput {
  attributeExists: Boolean
  attributeType: AttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: SizeInput
}

input GeoAreaConditionInput {
  and: [GeoAreaConditionInput]
  not: GeoAreaConditionInput
  or: [GeoAreaConditionInput]
  city: StringInput
  state: StringInput
  zipCodes: StringInput
  county: StringInput
  latitude: FloatInput
  longitude: FloatInput
}

input GeoAreaFilterInput {
  and: [GeoAreaFilterInput]
  not: GeoAreaFilterInput
  or: [GeoAreaFilterInput]
  city: StringInput
  state: StringInput
  zipCodes: StringInput
  county: StringInput
  latitude: FloatInput
  longitude: FloatInput
}

type Item {
  id: ID!
  content: String
}

type GeoArea {
  id: ID!
  city: String
  state: String
  zipCodes: [String]
  county: String
  latitude: Float
  longitude: Float
  geoJson: JSON
}

input CreateItemInput {
  content: String!
}

input UpdateItemInput {
  id: ID!
  content: String!
}

input DeleteItemInput {
  id: ID!
}

input CreateGeoAreaInput {
  city: String!
  state: String!
  zipCodes: [String]!
  county: String!
  latitude: Float!
  longitude: Float!
  geoJson: JSON!
}

type GeoAreaConnection {
  items: [GeoArea]!
  cursor: Cursor
  startedAt: String
}
